# -*- coding: utf-8 -*-
"""functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qw0jhHMOmWyljLBqwT8bOGpyjpee-NiB
"""

import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from scipy.stats import pearsonr


# question 1
def plot_top_genre_counts(df):
    '''
    Intake a dataframe and return the visualization of genres of top 30 songs
    in 2019 and 2018.
    '''
    df_cleaned = df.dropna()
    n = df_cleaned['year'] == 2019
    n_1 = df_cleaned['year'] == 2018
    df_tracks = df_cleaned[n | n_1]
    n_2 = df_tracks['popularity'] > 0
    top_popular = df_tracks[n_2].sort_values(by='popularity',
                                             ascending=False).head(30)
    genre_counts = top_popular.groupby('the genre of the track').size(
                                        ).sort_values(
                                       ascending=False)
    plt.bar(genre_counts.index, genre_counts.values)
    plt.xlabel('Genre')
    plt.ylabel('Count')
    plt.title('Top 30 Albums by Genre')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()


# question 2

# correlation visualization

def create_scatter_plot(df, x_column, y_column):
    '''
    Plot the visualization of correlation between different
    features of a song with popularity.
    '''
    fig = px.scatter(df, x=x_column, y=y_column, color=y_column, size=y_column)
    fig.show()


# correlation coefficient
def calculate_correlations(df, target_column, feature_columns):
    '''
    Return correlation coefficient between different music
    features and popularity.
    '''
    correlations = {}
    df_cleaned = df.dropna()
    for column in feature_columns:
        correlation, _ = pearsonr(df_cleaned[target_column],
                                  df_cleaned[column])
        correlations[column] = correlation

    return correlations

# question3


def plot_top_songs(df, year):
    '''
    Plot top 10 most popular songs in 2019 and 2010.
    '''
    df_filtered = df.query(f'year <= {year}')
    top_songs = df_filtered.sort_values(by='popularity',
                                        ascending=False).head(10)

    plt.figure(figsize=(10, 6))
    plt.plot(top_songs['title'], top_songs['popularity'], marker='o')
    plt.xlabel('Song Name')
    plt.ylabel('Popularity')
    plt.title(f'Top 10 Popular Songs ({year} and Earlier)')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()


# question4
def plot_explicit_by_continent(df_country):
    '''
    Plot the proportion of explicit songs in different continent.
    '''
    df_cleaned = df_country.dropna()
    explicit_by_continent = df_cleaned.groupby('Continent')['Explicit'].mean()

    plt.bar(explicit_by_continent.index, explicit_by_continent.values)
    plt.xlabel('Continent')
    plt.ylabel('Explicit Count')
    plt.title('Explicit Data by Continent')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()


if __name__ == '__main__':
    df = pd.read_csv('/content/top50MusicFrom2010-2019.csv')
    df_country = pd.read_csv('/content/SpotifySongsByCountry_2020.csv')

    # top 30 songs genres
    plot_top_genre_counts(df)

    # features and popularity relation
    create_scatter_plot(df, "duration", "popularity")
    create_scatter_plot(df, "danceability", "popularity")
    create_scatter_plot(df, "energy", "popularity")
    create_scatter_plot(df, "loudness", "popularity")
    create_scatter_plot(df, "speechiness", "popularity")
    create_scatter_plot(df, "acousticness", "popularity")
    create_scatter_plot(df, "liveness", "popularity")
    create_scatter_plot(df, "valence", "popularity")
    create_scatter_plot(df, "tempo", "popularity")

    # correlation coefficient
    target_column = 'popularity'
    feature_columns = ['danceability', 'duration', 'energy', 'loudness',
                       'speechiness', 'acousticness', 'liveness',
                       'valence', 'tempo']

    correlations = calculate_correlations(df, target_column, feature_columns)

    for column, correlation in correlations.items():
        print(f"{column} - Pearson's correlation: {correlation:.3f}")

    #  plot 2019 and 2010 top songs
    plot_top_songs(df, year=2019)
    plot_top_songs(df, year=2010)

    # explicit content by continent
    plot_explicit_by_continent(df_country)
